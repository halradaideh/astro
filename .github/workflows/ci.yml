name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches: [ 'main' ]
  push:
    branches: [ 'main' ]

permissions:
  contents: write
  pull-requests: write
  issues: write
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test build
        run: |
          npm run build
          if [ $? -eq 0 ]; then
            echo "Build successful!"
          else
            echo "Build failed!"
            exit 1
          fi

  prepare-release:
    needs: [test-build]
    if: |
      (github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main') ||
      (github.event_name == 'push' &&
      github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
      release_id: ${{ steps.create_release.outputs.release_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build site
        run: npm run build

      - name: Determine version bump
        id: bump
        uses: actions/github-script@v7
        with:
          script: |
            let bump = 'patch';
            if (context.eventName === 'pull_request') {
              const labels = context.payload.pull_request.labels.map(l => l.name);
              if (labels.includes('major')) bump = 'major';
              else if (labels.includes('minor')) bump = 'minor';
            }
            core.setOutput('bump', bump);

      - name: Get latest version
        id: versioning
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case "${{ steps.bump.outputs.bump }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ steps.versioning.outputs.new_version }}" -m "Release v${{ steps.versioning.outputs.new_version }}"
          git push origin "v${{ steps.versioning.outputs.new_version }}"

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const newVersion = '${{ steps.versioning.outputs.new_version }}';
            const tagName = `v${newVersion}`;
            
            try {
              // Try to get existing release
              const existingRelease = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: tagName
              });
              
              // If release exists, update it
              const release = await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: existingRelease.data.id,
                name: `Release ${tagName}`,
                body: 'Automated release update',
                draft: false,
                prerelease: false
              });
              
              core.setOutput('release_id', release.data.id);
            } catch (error) {
              if (error.status === 404) {
                // Release doesn't exist, create new one
                const release = await github.rest.repos.createRelease({
                  owner,
                  repo,
                  tag_name: tagName,
                  name: `Release ${tagName}`,
                  body: 'Automated release',
                  draft: false,
                  prerelease: false,
                  generate_release_notes: true
                });
                
                core.setOutput('release_id', release.data.id);
              } else {
                throw error;
              }
            }

  deploy:
    needs: [prepare-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build site
        run: npm run build
        
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./dist --project-name=blog-radaideh-info 