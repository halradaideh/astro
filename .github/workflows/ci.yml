name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches: ['main']
  push:
    branches: ['main']

env:
  # Node and Package Management
  NODE_VERSION: 'latest'
  NPM_VERSION: 'latest'
  WRANGLER_VERSION: '3.28.2'

  # Project Configuration
  PROJECT_NAME: 'blog-radaideh-info'
  CUSTOM_DOMAIN: 'blog.radaideh.info'
  DIST_DIR: './dist'

  # Worker Configuration
  WORKER_NAME: 'blog-worker'
  DEPLOYMENT_ENV: 'production'

  # Build Configuration
  BUILD_ENV: 'production'

  # Giscus Configuration
  GISCUS_REPO: 'halradaideh/astro'
  GISCUS_REPO_ID: '989307835'
  GISCUS_CATEGORY: 'General'
  GISCUS_CATEGORY_ID: 'DIC_kwDOOveju84Cqi8P'

  # KV Namespace Names
  KV_STATS_NAME: 'BLOG_STATS'
  KV_VIEWS_NAME: 'BLOG_VIEWS'
  KV_REACTIONS_NAME: 'BLOG_REACTIONS'

permissions:
  contents: write
  pull-requests: write
  issues: write
  deployments: write
  discussions: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          npm install
          npm ci --install-links

      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx,.astro --no-cache

      - name: Check formatting
        run: npm run format:check

      - name: Type check
        run: npm run typecheck

  test-build:
    needs: [quality-checks]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          npm install
          npm ci --install-links

      - name: Test build
        run: |
          npm run build
          if [ $? -eq 0 ]; then
            echo "Build successful!"
          else
            echo "Build failed!"
            exit 1
          fi

  prepare-release:
    needs: [test-build]
    if: |
      (github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main') ||
      (github.event_name == 'push' &&
      github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
      release_id: ${{ steps.create_release.outputs.release_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          npm install
          npm ci --install-links

      - name: Build site
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ${{ env.DIST_DIR }}
          retention-days: 1

      - name: Determine version bump
        id: bump
        uses: actions/github-script@v7
        with:
          script: |
            let bump = 'patch';
            if (context.eventName === 'pull_request') {
              const labels = context.payload.pull_request.labels.map(l => l.name);
              if (labels.includes('major')) bump = 'major';
              else if (labels.includes('minor')) bump = 'minor';
            }
            core.setOutput('bump', bump);

      - name: Get latest version
        id: versioning
        run: |
          # Get all tags and sort them by version
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1 || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}

          # If no version exists, start with 0.0.0
          if [ -z "$CURRENT_VERSION" ]; then
            CURRENT_VERSION="0.0.0"
          fi

          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          case "${{ steps.bump.outputs.bump }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            *)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ steps.versioning.outputs.new_version }}" -m "Release v${{ steps.versioning.outputs.new_version }}"
          git push origin "v${{ steps.versioning.outputs.new_version }}"

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const newVersion = '${{ steps.versioning.outputs.new_version }}';
            const tagName = `v${newVersion}`;

            try {
              // Try to get existing release
              const existingRelease = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: tagName
              });
              
              // If release exists, update it
              const release = await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: existingRelease.data.id,
                name: `Release ${tagName}`,
                body: 'Automated release update',
                draft: false,
                prerelease: false
              });
              
              core.setOutput('release_id', release.data.id);
            } catch (error) {
              if (error.status === 404) {
                // Release doesn't exist, create new one
                const release = await github.rest.repos.createRelease({
                  owner,
                  repo,
                  tag_name: tagName,
                  name: `Release ${tagName}`,
                  body: 'Automated release',
                  draft: false,
                  prerelease: false,
                  generate_release_notes: true
                });
                
                core.setOutput('release_id', release.data.id);
              } else {
                throw error;
              }
            }

  deploy:
    needs: [prepare-release]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Wrangler
        run: npm install -g wrangler@${{ env.WRANGLER_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ${{ env.DIST_DIR }}

      - name: Deploy to Cloudflare Pages
        id: pages-deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: pages deploy ${{ env.DIST_DIR }} --project-name=${{ env.PROJECT_NAME }} --env ${{ env.DEPLOYMENT_ENV }} --env-vars "GISCUS_REPO=${{ env.GISCUS_REPO }},GISCUS_REPO_ID=${{ env.GISCUS_REPO_ID }},GISCUS_CATEGORY=${{ env.GISCUS_CATEGORY }},GISCUS_CATEGORY_ID=${{ env.GISCUS_CATEGORY_ID }}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      - name: Configure Custom Domain
        if: steps.pages-deploy.outcome == 'success'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: pages domain set ${{ env.PROJECT_NAME }} ${{ env.CUSTOM_DOMAIN }}

      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: context.sha,
              environment: '${{ env.DEPLOYMENT_ENV }}',
              auto_merge: false,
              required_contexts: [],
              description: '${{ env.DEPLOYMENT_ENV }} Deployment'
            });

            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.data.id,
              state: status,
              environment: '${{ env.DEPLOYMENT_ENV }}',
              environment_url: 'https://${{ env.CUSTOM_DOMAIN }}',
              description: status === 'success' ? 'Deployment successful' : 'Deployment failed',
              log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`
            });

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            await github.rest.issues.create({
              owner,
              repo,
              title: 'ðŸš¨ Deployment Failed',
              body: `Deployment failed in run [#${context.runNumber}](https://github.com/${owner}/${repo}/actions/runs/${context.runId})\n\nCommit: ${context.sha}\nBranch: ${context.ref}`,
              labels: ['deployment', 'bug']
            });
