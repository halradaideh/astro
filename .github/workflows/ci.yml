name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches: ['main']
  push:
    branches: ['main']

env:
  # Node and Package Management
  NODE_VERSION: 'latest'
  NPM_VERSION: 'latest'
  WRANGLER_VERSION: '3.28.2'

  # Site Configuration - Use secrets for actual values
  SITE_URL: ${{ secrets.SITE_URL }}
  PROJECT_NAME: 'blog-radaideh-info'
  CUSTOM_DOMAIN: ${{ secrets.CUSTOM_DOMAIN }}
  DIST_DIR: './dist'

  # Development Configuration
  DEV_URL: 'http://localhost:4321'
  DEV_PORT: '4321'

  # Deployment Configuration
  DEPLOYMENT_ENV: 'production'
  BUILD_ENV: 'production'

  # Giscus Configuration - Use secrets for actual values
  GISCUS_REPO: ${{ secrets.GISCUS_REPO }}
  GISCUS_REPO_ID: ${{ secrets.GISCUS_REPO_ID }}
  GISCUS_CATEGORY: ${{ secrets.GISCUS_CATEGORY }}
  GISCUS_CATEGORY_ID: ${{ secrets.GISCUS_CATEGORY_ID }}

  # KV Namespace Names
  KV_STATS_NAME: 'BLOG_STATS'
  KV_VIEWS_NAME: 'BLOG_VIEWS'
  KV_REACTIONS_NAME: 'BLOG_REACTIONS'

  # Rate Limiting Configuration
  RATE_LIMIT_REQUESTS: '60'
  RATE_LIMIT_WINDOW: '60'

permissions:
  contents: write
  pull-requests: write
  issues: write
  deployments: write
  discussions: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Combined job: Quality checks + Build + Tests (runs once, caches everything)
  build-and-test:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready-to-test') || 
      contains(github.event.pull_request.labels.*.name, 'ready-to-deploy') ||
      github.event_name == 'push'
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
      build-hash: ${{ steps.build-hash.outputs.hash }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true
          cache: 'npm'

      # Enhanced npm caching
      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (optimized)
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          if [ "${{ steps.cache.outputs.cache-hit }}" != "true" ]; then
            npm ci --install-links
          else
            echo "Using cached node_modules"
          fi

      # Quality checks
      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx,.astro --no-cache

      - name: Check formatting
        run: npm run format:check

      - name: Type check
        run: npm run typecheck

      # Install Playwright browsers (cached)
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Build once and cache
      - name: Build site
        run: |
          echo "Building site..."
          npm run build
          echo "Build completed. Checking dist directory:"
          ls -la ${{ env.DIST_DIR }}
          echo "Total files in dist:"
          find ${{ env.DIST_DIR }} -type f | wc -l

      - name: Generate build hash
        id: build-hash
        run: |
          # Ensure dist directory exists and has content
          if [ ! -d "${{ env.DIST_DIR }}" ] || [ -z "$(ls -A ${{ env.DIST_DIR }})" ]; then
            echo "Error: Dist directory is empty or doesn't exist"
            exit 1
          fi

          # Generate hash from all files in dist directory
          BUILD_HASH=$(find ${{ env.DIST_DIR }} -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)

          # Validate hash is not empty
          if [ -z "$BUILD_HASH" ]; then
            echo "Error: Build hash is empty"
            exit 1
          fi

          echo "Generated build hash: $BUILD_HASH"
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT

      # Upload build artifacts for reuse
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.build-hash.outputs.hash }}
          path: ${{ env.DIST_DIR }}
          retention-days: 1

      - name: Debug artifact upload
        run: |
          echo "Uploaded artifact with name: dist-${{ steps.build-hash.outputs.hash }}"
          echo "Build hash: ${{ steps.build-hash.outputs.hash }}"
          echo "Artifact path: ${{ env.DIST_DIR }}"

      # Run Playwright tests on built site
      - name: Run Playwright tests
        run: npm run test || true
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_id }}
          path: playwright-report/
          retention-days: 7

  # Security scan (uses cached dependencies)
  security-scan:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready-to-test') || 
      contains(github.event.pull_request.labels.*.name, 'ready-to-deploy') ||
      github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

  # Performance test (reuses build artifact)
  performance-test:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready-to-test') || 
      contains(github.event.pull_request.labels.*.name, 'ready-to-deploy') ||
      github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Debug job inputs
        run: |
          echo "Build hash from build-and-test job: ${{ needs.build-and-test.outputs.build-hash }}"
          echo "Expected artifact name: dist-${{ needs.build-and-test.outputs.build-hash }}"
          echo "Dist directory: ${{ env.DIST_DIR }}"

      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true
          cache: 'npm'

      # Restore cached dependencies
      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies (from cache)
        run: npm ci --install-links

      # Download pre-built artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build-and-test.outputs.build-hash }}
          path: ${{ env.DIST_DIR }}
        continue-on-error: true
        id: download-artifacts

      - name: Fallback build if artifacts not available
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "Artifacts not available, building locally..."
          npm install -g npm@${{ env.NPM_VERSION }}
          npm ci --install-links
          npm run build

      - name: Verify dist directory
        run: |
          if [ ! -d "${{ env.DIST_DIR }}" ] || [ -z "$(ls -A ${{ env.DIST_DIR }})" ]; then
            echo "Error: Dist directory is empty or doesn't exist after build/download"
            exit 1
          fi
          echo "Dist directory contents:"
          ls -la ${{ env.DIST_DIR }}

      - name: Serve site
        run: npm run preview &

      - name: Wait for server
        run: sleep 10

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: '.lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Check bundle size
        run: npx bundlesize

  # Release preparation (only when ready-to-deploy label is added)
  prepare-release:
    needs: [build-and-test, security-scan, performance-test]
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready-to-deploy') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
      release_id: ${{ steps.create_release.outputs.release_id }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      # No need to rebuild - reuse artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build-and-test.outputs.build-hash }}
          path: ${{ env.DIST_DIR }}
        continue-on-error: true
        id: download-artifacts

      - name: Setup Node.js with caching (if needed)
        if: steps.download-artifacts.outcome == 'failure'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true
          cache: 'npm'

      - name: Fallback build if artifacts not available
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "Artifacts not available, building locally..."
          npm install -g npm@${{ env.NPM_VERSION }}
          npm ci --install-links
          npm run build

      - name: Verify dist directory
        run: |
          if [ ! -d "${{ env.DIST_DIR }}" ] || [ -z "$(ls -A ${{ env.DIST_DIR }})" ]; then
            echo "Error: Dist directory is empty or doesn't exist after build/download"
            exit 1
          fi

      - name: Determine version bump
        id: bump
        uses: actions/github-script@v7
        with:
          script: |
            let bump = 'patch';
            if (context.eventName === 'pull_request') {
              const labels = context.payload.pull_request.labels.map(l => l.name);
              if (labels.includes('major')) bump = 'major';
              else if (labels.includes('minor')) bump = 'minor';
            }
            core.setOutput('bump', bump);

      - name: Get latest version
        id: versioning
        run: |
          # Get all tags and sort them by version
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1 || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}

          # If no version exists, start with 0.0.0
          if [ -z "$CURRENT_VERSION" ]; then
            CURRENT_VERSION="0.0.0"
          fi

          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          case "${{ steps.bump.outputs.bump }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            *)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ steps.versioning.outputs.new_version }}" -m "Release v${{ steps.versioning.outputs.new_version }}"
          git push origin "v${{ steps.versioning.outputs.new_version }}"

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const newVersion = '${{ steps.versioning.outputs.new_version }}';
            const tagName = `v${newVersion}`;

            try {
              // Try to get existing release
              const existingRelease = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: tagName
              });
              
              // If release exists, update it with auto-generated notes
              const release = await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: existingRelease.data.id,
                name: `Release ${tagName}`,
                body: `Automated release ${tagName} with latest updates and improvements.`,
                draft: false,
                prerelease: false
              });
              
              core.setOutput('release_id', release.data.id);
            } catch (error) {
              if (error.status === 404) {
                // Release doesn't exist, create new one with auto-generated release notes
                const release = await github.rest.repos.createRelease({
                  owner,
                  repo,
                  tag_name: tagName,
                  name: `Release ${tagName}`,
                  body: `Automated release ${tagName}`,
                  draft: false,
                  prerelease: false,
                  generate_release_notes: true
                });
                
                core.setOutput('release_id', release.data.id);
              } else {
                throw error;
              }
            }

  # Deploy (reuses the same build artifacts)
  deploy:
    needs: [prepare-release, build-and-test]
    runs-on: ubuntu-latest
    environment: production
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready-to-deploy') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Reuse the same build artifacts from earlier
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build-and-test.outputs.build-hash }}
          path: ${{ env.DIST_DIR }}
        continue-on-error: true
        id: download-artifacts

      - name: Setup Node.js with caching (if needed)
        if: steps.download-artifacts.outcome == 'failure'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true
          cache: 'npm'

      - name: Fallback build if artifacts not available
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "Artifacts not available, building locally..."
          npm install -g npm@${{ env.NPM_VERSION }}
          npm ci --install-links
          npm run build

      - name: Verify dist directory
        run: |
          if [ ! -d "${{ env.DIST_DIR }}" ] || [ -z "$(ls -A ${{ env.DIST_DIR }})" ]; then
            echo "Error: Dist directory is empty or doesn't exist after build/download"
            exit 1
          fi

      - name: Deploy to Cloudflare Pages
        id: pages-deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ env.PROJECT_NAME }}
          directory: ${{ env.DIST_DIR }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          wranglerVersion: '${{ env.WRANGLER_VERSION }}'
          environmentVariables: |
            SITE_URL=${{ env.SITE_URL }}
            DEV_URL=${{ env.DEV_URL }}
            DEV_PORT=${{ env.DEV_PORT }}
            GISCUS_REPO=${{ secrets.GISCUS_REPO }}
            GISCUS_REPO_ID=${{ secrets.GISCUS_REPO_ID }}
            GISCUS_CATEGORY=${{ secrets.GISCUS_CATEGORY }}
            GISCUS_CATEGORY_ID=${{ secrets.GISCUS_CATEGORY_ID }}
            CLOUDFLARE_API_TOKEN=${{ secrets.CF_API_TOKEN }}
            CLOUDFLARE_ACCOUNT_ID=${{ secrets.CF_ACCOUNT_ID }}
            RATE_LIMIT_REQUESTS=${{ env.RATE_LIMIT_REQUESTS }}
            RATE_LIMIT_WINDOW=${{ env.RATE_LIMIT_WINDOW }}
          kv: |
            VISIT_COUNTS=${{ secrets.KV_VISIT_COUNTS_ID }}
            LIKES=${{ secrets.KV_LIKES_ID }}

      - name: Create KV Namespaces
        if: steps.pages-deploy.outcome == 'success'
        run: |
          for ns in VISIT_COUNTS LIKES; do
            echo "Creating KV namespace: $ns"
            npx wrangler@${{ env.WRANGLER_VERSION }} kv:namespace create $ns || true
          done
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: context.sha,
              environment: '${{ env.DEPLOYMENT_ENV }}',
              auto_merge: false,
              required_contexts: [],
              description: '${{ env.DEPLOYMENT_ENV }} Deployment'
            });

            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.data.id,
              state: status,
              environment: '${{ env.DEPLOYMENT_ENV }}',
              environment_url: 'https://${{ env.CUSTOM_DOMAIN }}',
              description: status === 'success' ? 'Deployment successful' : 'Deployment failed',
              log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`
            });

      - name: Remove ready-to-deploy label
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              name: 'ready-to-deploy'
            });

      - name: Add deployed label
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['deployed']
            });

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            await github.rest.issues.create({
              owner,
              repo,
              title: '🚨 Deployment Failed',
              body: `Deployment failed in run [#${context.runNumber}](https://github.com/${owner}/${repo}/actions/runs/${context.runId})\n\nCommit: ${context.sha}\nBranch: ${context.ref}`,
              labels: ['deployment', 'bug']
            });

  # Cleanup artifacts after successful deployment
  cleanup:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('dist-')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }
