name: CI

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches: [ 'main' ]
  push:
    branches: [ 'main' ]

permissions:
  contents: write
  pull-requests: write
  issues: write
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_target' &&
      (github.event.action == 'opened' ||
       github.event.action == 'synchronize' ||
       github.event.action == 'reopened' ||
       github.event.action == 'labeled' ||
       github.event.action == 'unlabeled')
    steps:
      - name: Check labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(l => l.name);
            const requiredLabels = ['ready-to-review', 'ready-to-test'];
            const missingLabels = requiredLabels.filter(l => !labels.includes(l));
            
            if (missingLabels.length > 0) {
              core.setFailed(`Missing required labels: ${missingLabels.join(', ')}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `⚠️ This PR is missing the following required labels: ${missingLabels.join(', ')}\n\nPlease add the required labels to proceed with CI checks.`
              });
            }

  test-build:
    needs: [validate]
    if: |
      (github.event_name == 'pull_request_target' &&
      contains(github.event.pull_request.labels.*.name, 'ready-to-test')) ||
      github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test build
        run: |
          npm run build
          if [ $? -eq 0 ]; then
            echo "Build successful!"
          else
            echo "Build failed!"
            exit 1
          fi

  prepare-release:
    needs: [test-build]
    if: |
      (github.event_name == 'pull_request_target' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main') ||
      (github.event_name == 'push' &&
      github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
      release_id: ${{ steps.create_release.outputs.release_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build site
        run: npm run build

      - name: Determine version bump
        id: bump
        uses: actions/github-script@v7
        with:
          script: |
            let bump = 'patch';
            if (context.eventName === 'pull_request_target') {
              const labels = context.payload.pull_request.labels.map(l => l.name);
              if (labels.includes('major')) bump = 'major';
              else if (labels.includes('minor')) bump = 'minor';
            }
            core.setOutput('bump', bump);

      - name: Get latest version
        id: versioning
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case "${{ steps.bump.outputs.bump }}" in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            let releaseNotes = '';
            
            if (context.eventName === 'pull_request_target') {
              const prNumber = context.payload.pull_request.number;
              
              // Get PR details
              const { data: pr } = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: prNumber
              });
              
              // Get PR commits
              const { data: commits } = await github.rest.pulls.listCommits({
                owner,
                repo,
                pull_number: prNumber
              });
              
              // Format commit messages
              const commitList = commits.map(commit => {
                const message = commit.commit.message.split('\n')[0];
                return `- ${message}`;
              }).join('\n');
              
              releaseNotes = `
              ## What's Changed
              ${pr.body || 'No description provided.'}
              
              ## Commits
              ${commitList}
              
              ## Author
              @${pr.user.login}
              
              ## Labels
              ${pr.labels.map(label => `\`${label.name}\``).join(', ')}
              `;
            } else {
              // For direct pushes to main
              const { data: commits } = await github.rest.repos.listCommits({
                owner,
                repo,
                sha: context.sha,
                per_page: 10
              });
              
              const commitList = commits.map(commit => {
                const message = commit.commit.message.split('\n')[0];
                return `- ${message}`;
              }).join('\n');
              
              releaseNotes = `
              ## Direct Push to Main
              
              ## Recent Commits
              ${commitList}
              
              ## Author
              @${commits[0].author.login}
              `;
            }
            
            core.setOutput('notes', releaseNotes);
        
      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.versioning.outputs.new_version }}`,
              name: `Release v${{ steps.versioning.outputs.new_version }}`,
              body: `${{ steps.release_notes.outputs.notes }}`,
              draft: false,
              prerelease: false,
              target_commitish: 'main',
              generate_release_notes: false
            });
            core.setOutput('release_id', release.id);
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  deploy:
    needs: [prepare-release]
    if: |
      success() && needs.prepare-release.result == 'success' &&
      ((github.event_name == 'pull_request_target' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main') ||
      (github.event_name == 'push' &&
      github.ref == 'refs/heads/main'))
    runs-on: ubuntu-latest
    environment: production
    concurrency: 
      group: production
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build site
        run: npm run build
        
      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: astro
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Release Notes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const releaseId = ${{ needs.prepare-release.outputs.release_id }};
            
            // Get current release
            const { data: release } = await github.rest.repos.getRelease({
              owner,
              repo,
              release_id: releaseId
            });
            
            // Get deployment URL from Cloudflare Pages
            const deploymentUrl = 'https://astro.pages.dev';
            
            const updatedBody = `${release.body}
            
            ## Deployment
            🚀 Successfully deployed to [Cloudflare Pages](${deploymentUrl})
            
            ### Version
            ${release.tag_name}
            
            ### Deployment Time
            ${new Date().toISOString()}
            `;
            
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: releaseId,
              body: updatedBody
            }); 