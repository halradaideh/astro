---
const pathname = Astro.url.pathname;
import { SITE_TITLE } from '../consts';
---

<nav class="nav-container">
  <div class="nav-content">
    <div class="nav-left">
      <h2><a href="/">{SITE_TITLE}</a></h2>
    </div>
    <div class="nav-right">
      <div class="nav-links">
        <a href="/" class={pathname === '/' ? 'nav-link active' : 'nav-link'}>Home</a>
        <a href="/blog" class={pathname.startsWith('/blog') ? 'nav-link active' : 'nav-link'}
          >Blog</a
        >
        <a href="/about" class={pathname === '/about' ? 'nav-link active' : 'nav-link'}>About</a>
      </div>
      <div class="social-links">
        <a
          href="https://github.com/halradaideh"
          target="_blank"
          rel="noopener noreferrer"
          aria-label="GitHub"
        >
          <svg viewBox="0 0 24 24" aria-hidden="true" width="20" height="20">
            <path
              fill="currentColor"
              d="M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z"
            ></path>
          </svg>
        </a>
        <a
          href="https://www.linkedin.com/in/hamdan-a-radaideh/"
          target="_blank"
          rel="noopener noreferrer"
          aria-label="LinkedIn"
        >
          <svg viewBox="0 0 24 24" aria-hidden="true" width="20" height="20">
            <path
              fill="currentColor"
              d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
            ></path>
          </svg>
        </a>
        <button class="theme-toggle" id="theme-toggle" aria-label="Toggle theme">
          <svg class="sun-icon" viewBox="0 0 24 24" width="16" height="16">
            <path
              fill="currentColor"
              d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1-8.313-12.454z"
            ></path>
          </svg>
          <svg class="moon-icon" viewBox="0 0 24 24" width="16" height="16">
            <path
              fill="currentColor"
              d="M12 2.25a.75.75 0 0 1 .75.75v2.25a.75.75 0 0 1-1.5 0V3a.75.75 0 0 1 .75-.75zM7.5 12a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0zm12 0a.75.75 0 0 1-.75.75h-2.25a.75.75 0 0 1 0-1.5H18a.75.75 0 0 1 .75.75z"
            ></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</nav>

<style>
  .nav-container {
    background-color: var(--bg-color);
    border-bottom: 1px solid var(--border-color);
    padding: 1rem;
    position: sticky;
    top: 0;
    z-index: 99;
    transition: all 0.3s ease;
  }

  .nav-container.scrolled {
    padding: 0.5rem 1rem;
    box-shadow: 0 2px 8px var(--shadow-color);
  }

  .nav-content {
    max-width: 1100px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .nav-left h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .nav-left a {
    text-decoration: none;
    color: var(--text-color);
  }

  .nav-right {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .nav-links {
    display: flex;
    gap: 2rem;
  }

  .nav-link {
    color: var(--text-muted);
    text-decoration: none;
    font-size: 1rem;
    padding: 0.25rem 0;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }

  .nav-link:hover {
    color: var(--text-color);
    border-bottom-color: var(--border-color);
  }

  .nav-link.active {
    color: var(--text-color);
    border-bottom-color: var(--accent-color);
  }

  .social-links {
    display: flex;
    gap: 1rem;
    padding-left: 1rem;
    border-left: 1px solid var(--border-color);
    align-items: center;
  }

  .social-links a {
    color: var(--text-muted);
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
  }

  .social-links a:hover {
    color: var(--text-color);
  }

  .sun-icon,
  .moon-icon {
    display: none;
  }

  [data-theme='dark'] .moon-icon {
    display: none;
  }

  [data-theme='dark'] .sun-icon {
    display: block;
  }

  [data-theme='light'] .sun-icon {
    display: none;
  }

  [data-theme='light'] .moon-icon {
    display: block;
  }

  @media (max-width: 768px) {
    .nav-container {
      padding: 0.75rem 1rem;
    }

    .nav-container.scrolled {
      padding: 0.5rem 1rem;
    }

    .nav-left h2 {
      font-size: 1.2rem;
    }

    .nav-right {
      gap: 1rem;
    }

    .nav-links {
      gap: 1rem;
    }

    .nav-link {
      font-size: 0.9rem;
    }

    .social-links {
      padding-left: 0.75rem;
      gap: 0.75rem;
    }
  }
</style>

<script>
  // Add scroll behavior
  const nav = document.querySelector('.nav-container');
  let lastScroll = 0;

  if (nav) {
    window.addEventListener('scroll', () => {
      const currentScroll = window.pageYOffset;

      if (currentScroll > lastScroll && currentScroll > 100) {
        nav.classList.add('scrolled');
      } else if (currentScroll < lastScroll && currentScroll < 100) {
        nav.classList.remove('scrolled');
      }

      lastScroll = currentScroll;
    });
  }

  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');

  // Check for saved theme preference, otherwise use system preference
  const getPreferredTheme = (): 'light' | 'dark' => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light' || savedTheme === 'dark') {
      return savedTheme;
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };

  // Apply theme
  const setTheme = (theme: 'light' | 'dark') => {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
  };

  // Initial theme setup - run as soon as possible
  document.documentElement.setAttribute('data-theme', getPreferredTheme());

  // Toggle theme
  themeToggle?.addEventListener('click', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme') as 'light' | 'dark';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
  });

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      setTheme(e.matches ? 'dark' : 'light');
    }
  });
</script>
